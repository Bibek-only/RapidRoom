// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Model 
model Users {
  id           Int        @id @default(autoincrement())
  fullName     String
  email        String     @unique
  password     String
  profileImage String?
  address      Address?   @relation(fields: [addressId], references: [id])
  addressId    Int?
  isOwner      Boolean    @default(false)
  bookedRooms  Booked[]
  wishList     WishList[]
  reviews      Review[]
  listedHotels Hotels[]
  createdAt    DateTime   @default(now())
}

model Hotels {
  id            Int        @id @default(autoincrement())
  ownerId       Int
  owner         Users      @relation(fields: [ownerId], references: [id],onDelete: Cascade)
  hotelName     String
  description   String?
  address       Address    @relation(fields: [addressId], references: [id],onDelete: Cascade)
  addressId     Int
  perNight      Float
  rooms         Rooms[]
  numberOfRooms Int
  hasParking    Boolean    @default(false)
  hasPools      Boolean    @default(false)
  hasWifi       Boolean    @default(false)
  isAllBooked   Boolean    @default(false)
  reviews       Review[]
  images        Images[]
  createdAt     DateTime   @default(now())
  Booked        Booked[]
  WishList      WishList[]
  type          HotelType  @default(BEACH)
}

enum HotelType {
  BEACH
  CITY
  MOUNTAIN
  RESORT
  BUDGET
  LUXURY
  AMAZING_VIEWS
  AMAZING_POOLS
  FARMS
  HISTORICAL_HOMES
  SURFING
  BEACHFRONT
  LAKEFRONT
  CASTLES
  CAMPING
  BOATS
  TROPICAL
  TOP_OF_THE_WORLD
  TOP_CITIES
  ARCTIC
  TREEHOUSES
  CABINS
  TINY_HOMES
  ISLANDS
  COUNTRYSIDE
  MANSIONS
}

model Address {
  id      Int      @id @default(autoincrement())
  street  String?
  city    String?
  state   String?
  zipCode String?
  country String?
  users   Users[]
  hotels  Hotels[]
}

model Rooms {
  id         Int      @id @default(autoincrement())
  isBooked   Boolean  @default(false)
  roomNumber Int
  hotelId    Int
  hotel      Hotels   @relation(fields: [hotelId], references: [id],onDelete: Cascade)
  checkIn    DateTime @default(now())
  checkOut   DateTime @default(now())
  Booked     Booked[]
}

model Booked {
  id      Int    @id @default(autoincrement())
  userId  Int
  user    Users  @relation(fields: [userId], references: [id],onDelete: Cascade)
  hotelId Int
  hotel   Hotels @relation(fields: [hotelId], references: [id],onDelete: Cascade)
  roomId  Int
  room    Rooms  @relation(fields: [roomId], references: [id],onDelete: Cascade)
}

model WishList {
  id      Int    @id @default(autoincrement())
  userId  Int
  user    Users  @relation(fields: [userId], references: [id],onDelete: Cascade)
  hotelId Int
  hotel   Hotels @relation(fields: [hotelId], references: [id],onDelete: Cascade)
}

model Review {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      Users    @relation(fields: [userId], references: [id],onDelete: Cascade)
  hotelId   Int
  hotel     Hotels   @relation(fields: [hotelId], references: [id],onDelete: Cascade)
  comment   String
  rating    Int
  createdAt DateTime @default(now())
}

model Images {
  id       Int    @id @default(autoincrement())
  imageUrl String
  hotelId  Int
  hotel    Hotels @relation(fields: [hotelId], references: [id],onDelete: Cascade)
}

// Payment Entity:

// ID
// Booking ID
// Payment Date
// Amount
// Payment Status (Pending, Completed, Refunded)

// Message Entity:

// ID
// Sender ID
// Receiver ID
// Booking ID
// Content
// Timestamp

// Notification Entity:

// ID
// User ID
// Booking ID
// Content
// Timestamp
// Status (Unread, Read)
