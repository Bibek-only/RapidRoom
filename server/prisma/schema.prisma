// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Model 
model Users {
  id               Int            @id @default(autoincrement())
  fullName         String
  email            String         @unique
  isEmailVerified  Boolean        @default(false)
  password         String
  profileImage     String?
  address          Address?       @relation(fields: [addressId], references: [id])
  addressId        Int?
  isHost           Boolean        @default(false)
  status           status         @default(PENDING)
  hostExperience   Int?
  hostRating       Int?           @default(5)
  hostResponseRate Int?           @default(100)
  phoneNumber      BigInt?        @default(0)
  GovID            BigInt?        @default(0)
  ReservedRooms    Reservations[]
  wishList         WishList[]
  reviews          Review[]
  listedHotels     Hotels[]
  payments         Payments[]
  createdAt        DateTime       @default(now())
}

model Hotels {
  id                   Int      @id @default(autoincrement())
  hostId               Int
  host                 Users    @relation(fields: [hostId], references: [id], onDelete: Cascade)
  hotelName            String?
  description          String?
  address              Address? @relation(fields: [addressId], references: [id], onDelete: Cascade)
  addressId            Int?
  perNight             Float?
  roomType             String?
  rooms                Rooms[]
  numberOfRooms        Int?
  numberOfEmptyRooms   Int?
  overalRating         Int      @default(0)
  totalReviews         Int      @default(0)

  guestAllowed Int @default(1)
  //add other things 
  hasWifi              Boolean   @default(false)
  hasTv                Boolean   @default(false)
  hasKitchen           Boolean   @default(false)
  hasBalcony           Boolean   @default(false)
  hasWorkSpace         Boolean   @default(false)
  hasWashingMachine    Boolean   @default(false)
  hasGarden            Boolean   @default(false)
  hasParking           Boolean   @default(false)
  hasAirConditioning   Boolean   @default(false)
  hasDiningArea        Boolean   @default(false)
  hasPool              Boolean   @default(false)
  hasHotTub            Boolean   @default(false)
  hasFirepit           Boolean   @default(false)
  hasBBQGrill          Boolean   @default(false)
  hasPoolTable         Boolean   @default(false)
  hasExerciseEquipment Boolean   @default(false)
  hasOutdoorShower     Boolean   @default(false)
  hasSmokeAlarm        Boolean   @default(false)
  hasFirstAidKit       Boolean   @default(false)
  hasFireExtinguisher  Boolean   @default(false)
  hasAccessibility     Boolean   @default(false)

  isAllReserved Boolean        @default(false)
  reviews       Review[]
  images        Images[]
  createdAt     DateTime       @default(now())
  Reserved      Reservations[]
  WishList      WishList[]
  type          HotelType?     @default(CITY)
  Payments      Payments[]
  status        status         @default(PENDING)
}

enum status {
  PENDING
  APPROVED
  REJECTED
}

enum HotelType {
  CITY
  MOUNTAIN
  RESORT
  LUXURY
  AMAZING_VIEWS
  FARMS
  HISTORICAL_HOMES
  BEACHFRONT
  LAKEFRONT
  CASTLES
  CAMPING
  TROPICAL
  ARCTIC
  ISLANDS
  COUNTRYSIDE
}

model Address {
  id        Int      @id @default(autoincrement())
  street    String?
  city      String?
  state     String?
  zipCode   String?
  country   String?
  longitude Decimal?
  latitude  Decimal?
  users     Users[]
  hotels    Hotels[]
}

model Rooms {
  id         Int            @id @default(autoincrement())
  isReserved Boolean        @default(false)
  roomNumber Int
  hotelId    Int
  hotel      Hotels         @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  Reserved   Reservations[]
}

model Reservations {
  id                   Int              @id @default(autoincrement())
  userId               Int
  user                 Users            @relation(fields: [userId], references: [id], onDelete: Cascade)
  hotelId              Int
  hotel                Hotels           @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  roomId               Int
  room                 Rooms            @relation(fields: [roomId], references: [id], onDelete: Cascade)
  payment              Payments?        @relation(fields: [paymentId], references: [id])
  paymentId            Int?             @unique
  checkIn              DateTime
  reservationsDuration Int?
  checkOut             DateTime
  amountPaid           Int
  ReservationStatus    reservtionStatus @default(pending)
  paymentStatus        paymentStatus    @default(pending)
}

enum reservtionStatus {
  pending
  active
  cancled
}

enum paymentStatus {
  pending
  success
  failed
  refund
  refunded
}

model WishList {
  id      Int    @id @default(autoincrement())
  userId  Int
  user    Users  @relation(fields: [userId], references: [id], onDelete: Cascade)
  hotelId Int
  hotel   Hotels @relation(fields: [hotelId], references: [id], onDelete: Cascade)
}

model Review {
  id                  Int      @id @default(autoincrement())
  userId              Int
  user                Users    @relation(fields: [userId], references: [id], onDelete: Cascade)
  hotelId             Int
  hotel               Hotels   @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  reviewComment       String
  overallRating       Int      @default(5)
  cleanlinessRating   Int      @default(5)
  accuracyRating      Int      @default(5)
  checkInRating       Int      @default(5)
  communicationRating Int      @default(5)
  locationRating      Int      @default(5)
  priceRating         Int      @default(5)
  parkingRating       Int      @default(5)
  createdAt           DateTime @default(now())

  @@unique([userId, hotelId])
}

model Images {
  id       Int    @id @default(autoincrement())
  imageUrl String
  hotelId  Int
  hotel    Hotels @relation(fields: [hotelId], references: [id], onDelete: Cascade)
}

// Data base model for fake payment
model Payments {
  id                  Int           @id @default(autoincrement())
  hotelId             Int
  userId              Int
  amount              Float
  hostAmount          Float         @default(0)
  platformFee         Float         @default(0)
  paymentMethod       String        @default("UPI")
  status              paymentStatus @default(pending) // pending, success, failed
  paymentDate         DateTime      @default(now())
  razorpay_payment_id String
  razorpay_order_id   String
  reservation         Reservations?
  hotel Hotels @relation(fields: [hotelId], references: [id], onDelete: Cascade )
  user  Users  @relation(fields: [userId], references: [id] , onDelete: Cascade )

  @@index([hotelId])
  @@index([userId])
}
